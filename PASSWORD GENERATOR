{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOgUDqkA8OmXqGe2hlSTMnk",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/nidhi-rathod/CODSOFT/blob/main/PASSWORD_GENERATOR.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rcyUl_mrPykd",
        "outputId": "735f34a6-12e1-4bcd-e3d4-8715562e0128"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Password Generator\n",
            "Enter the desired length of the password: 8\n",
            "Enter the complexity level (low/medium/high): HIGH\n",
            "Generated Password: E.39&f3:\n"
          ]
        }
      ],
      "source": [
        "import random\n",
        "import string\n",
        "\n",
        "def generate_password(length, complexity):\n",
        "    if complexity == \"low\":\n",
        "        characters = string.ascii_letters\n",
        "    elif complexity == \"medium\":\n",
        "        characters = string.ascii_letters + string.digits\n",
        "    elif complexity == \"high\":\n",
        "        characters = string.ascii_letters + string.digits + string.punctuation\n",
        "    else:\n",
        "        print(\"Invalid complexity level. Please choose from 'low', 'medium', or 'high'.\")\n",
        "        return\n",
        "\n",
        "    password = ''.join(random.choice(characters) for _ in range(length))\n",
        "    return password\n",
        "\n",
        "def main():\n",
        "    print(\"Password Generator\")\n",
        "    length = int(input(\"Enter the desired length of the password: \"))\n",
        "    complexity = input(\"Enter the complexity level (low/medium/high): \").lower()\n",
        "\n",
        "    password = generate_password(length, complexity)\n",
        "    if password:\n",
        "        print(f\"Generated Password: {password}\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ]
    }
  ]
}
